********************************************************************
Native tokens are explicitly minted or burnt, otherwise they don't exist
********************************************************************
Value is attached to a UTxO and can be either (amount_of_lovelace :: Integer) or (token_value :: BuiltinBytestring)
   * Value is defined in Plutus.V1.Ledger.Value
   * Value { getValue :: Map CurrencySymbol (Map TokenName Integer) }
        -> giving nothing and empty bytestring ("") to CurrencySymbol and TokenName respectively, will yield Ada(lovelace)
        -> i.e adaSymbol :: CurrencySymbol = ,  adaToken :: TokenName = ""
        -> AssetClass { assetClass :: (CurrencySymbol, TokenName) }
We can specify that an integer is a lovelace using the function lovelaceValueOf :: Integer -> Value
    -> E.g., lovelaceValueOf 123 = Value (Map[( ,Map[("", 123)])])
Value class is an instance of monoid, that means we can combine them using `mappend` or <> in this case
    -> E.g., lovelaceValueOf 10 <> lovelaceValueOf 20 = Value (Map[( ,Map[("", 30)])])

Now, time for native tokens. We use a function called 'singleton' to create native tokens
    -> singleton :: CurrencySymbol -> TokenName -> Integer -> Value
        CurrencySymbol must be a string representing a HEX value. E.g., "0123456789abcdef"
        TokenName is an arbitrary bytestring. E.g., "MyToken"
    -> singleton "8ffa" "Token" 5 = Value (Map[(8ffa, Map[("Token", 5)])])
    -> E.g.,
        *Prelude Plutus.V1.Ledger.Value> singleton "8ffa" "Tkn1" 15 <> singleton "8ffa" "Tkn1" 20
        Value (Map [(8ffa,Map [("Tkn1",35)])])

        *Prelude Plutus.V1.Ledger.Value> singleton "8ffa" "Tkn1" 15 <> singleton "8ffb" "Tkn1" 20
        Value (Map [(8ffa,Map [("Tkn1",15)]),(8ffb,Map [("Tkn1",20)])])

        *Prelude Plutus.V1.Ledger.Value> v = singleton "8ffa" "Tkn1" 15 <> singleton "8ffa" "Tkn2" 20 <> lovelaceValueOf 25
        Value (Map [( ,Map[("", 25)]), (8ffa,Map [("Tkn1",15),("Tkn2",20)])])

    -> Useful functions: valueOf :: Value -> CurrencySymbol -> TokenName -> Integer 
                            ... valueOf v "8ffa" "Tkn1" = 15
                         flattenValue :: Value -> [(CurrencySymbol, TokenName, Integer)] 
                            ... flattenValue v = [(8ffb,"Tkn2",20),(8ffa,"Tkn1",15),(,"",25)]

Why do we need both CurrencySymbol and TokenName? ... Due to Minting policies
In general, a txn can't create or delete tokens (what goes in, must come out). 
The reason CurrencySymbol is made of hexadecimal bytestring is because it is the hash of a script (which is the Minting policy). Each 
time a txn wants to mint/burn a native token, the CurrencySymbol (Minting policy) is looked up and the corresponding script must be 
contained in the txn, and that script is executed (along with other validation scripts). 

The purpose of these minting scripts is to validate whether this txn has the right to mint/burn tokens. In the case of lovelace(Ada),
the CurrencySymbol is empty, which is not the hash of any script (there's no script that allows the minting/burning of Ada)... All the 
Ada that exist come from the Genesis Block and from monetary expansion (when rewards are paid after each epoch)... but the total amount 
of Ada in the blockchain is fixed.

********************************* Iteration 4's version
To construct a value type, we use this function - assetClassValue :: AssetClass -> Integer -> Value
    -> AssetClass is just a tuple of (CurrencySymbol, TokenName)
    -> Here, AssetClass is created using this function - assetClass :: CurrencySymbol -> TokenName -> AssetClass
    -> Value representing 100 Ada ... assetClassValue ada 100000000 = Value (Map [(,Map [("",100000000)])])
        > let ada = assetClass adaSymbol adaToken 
        > myAda = assetClassValue ada 100000000
        > assetClassValueOf myAda ada    ...... assetClassValueOf :: Value -> AssetClass -> Integer
            100000000

Now, let's try this with native tokens
        > assetClassValue (assetClass "ae24fb53" "MyToken") 45
            Value (Map [(ae24fb53,Map [("MyToken",45)])])
        > assetClassValueOf acv (assetClass "ae24fb53" "MyToken") 
            45
Because Value is an instance of a Monoid, we can use <> on different Value types to combine them
        > mempty :: Value
            Value (Map [])
    -> we can append two assetClassValue's together using <>
        > let ac = assetClass "ae24fb53" "MyToken"
        > let acv1 = assetClassValue ac 45
        > let acv2 = assetClassValue ac 20
        > acv1 <> acv2
            Value (Map [(ae24fb53,Map [("MyToken",65)])])
        > let acv3 = assetClassValue (assetClass "ae24fb53" "MyOtherToken") 20
        > let acv4 = assetClassValue (assetClass "ae24fb537345" "MyToken") 20
        > acv1 <> acv3
            Value (Map [(ae24fb53,Map [("MyOtherToken",20),("MyToken",45)])])
        > acv1 <> acv4
            Value (Map [(ae24fb53,Map [("MyToken",45)]),(ae24fb537345,Map [("MyToken",20)])])
    
    -> We can extract the values from these assetClassValue's using assetClassValueOf
        > assetClassValueOf (acv1 <> acv2) ac
            65
        > let ada = assetClass adaSymbol adaToken 
        > myAda = assetClassValue ada 100000000
        > assetClassValueOf (acv1 <> myAda) ada
            100000000
        > assetClassValueOf (acv1 <> myAda) (assetClass "af32" "MadeUp")
            0

****************************** Minting Policy *********************************************
Recall that a ScriptContext type has two value constructors ... ScriptContext { scriptContextTxInfo  :: TxInfo ,
                                                                               scriptContextPurpose :: ScriptPurpose  }
    -> TxInfo has 10 value constructors, one of them is ... TxInfo { txInfoMint :: Value }
    -> ScriptPurpose has 4 value constructors ... ScriptPurpose { Minting    :: CurrencySymbol ,
                                                                  Spending   :: TxOutRef , ... Reference to UTxO we want to consume
                                                                  Rewarding  :: StakingCredential ,
                                                                  Certifying :: DCert  }
Monetary policies (minting policies) are executed of the txInfoMint value is non-zero. Minting policies allow us to create and burn tokens.
A non-zero txInfoMint contains one or more different AssetClass(es)... AssetClass :: (CurrencySymbol, TokenName) -> AssetClass
Non-zero (txInfoMint :: Value) means a non-empty Value .. mempty :: Value = Value (Map []) and the amount mapped to the TokenName is non-zero
    -> Every MintingPolicy corresponding to the CurrencySymbol (Minting policy script hash) is run
    -> Minting policies only have 2 inputs (redeemer and context) ... datum only sits on sth that can be spent
    -> For each CurrencySymbol, the corresponding minting policy script will run with the redeemer and the context (In this case, the
        ScriptPurpose will be Minting :: CurrencySymbol ... the CurrencySymbol corresponding to the hash of the minting script being run)
    -> There may be several minting policies being involved in one txn, if we mint currency of different CurrencySymbols in the txn and all
        the minting policies should be executed and all should pass for the txn to succeed.
    
****************************** NFTs *********************************************
NFTs are tokens which can only be minted once. If you know the policy script of an NFT that corresponds to the CurrencySymbol, you can be
sure that only one token exists on the blockchain. This is achieved using UTxOs because every UTxO is unique. Even if multiple UTxOs belong
to one address and have the same datum, they are differentiated by txn hash they came from and their index. Also, txns are unique because
every txn must have an input UTxO (o/p of a previous txn), to cover for fees.
Our minting policy will take a specific UTxO as a parameter and the txn that does the minting of the NFT must consume the UTxO to make sure
that the same minting policy can't be used to mint another NFT.