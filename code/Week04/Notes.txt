******************************************************************************************************************************

If a wallet wants to access a UTxO, script or datum, it has to find it in the blockchain first. That means it has to run its own 
local node, Use its own local database synchronized with a local or remote node (using a chain indexer) or use third party tools 
that runs its own nodes and databeses. (E.g., Blockfrost)

By now you should know the 2 ways to attach a script:
 -> the producing txn (the one creating the script) can attach the hash of the script to the UTxO, so that the consuming txn can 
    include the script in the txn and validators can validate by comparing the scripts' hash
 -> the producing txn can attach a reference script to a UTxO that can't be spent, so that the consumer(s) can just reference the 
    script when they want to spend the UTxO at that script. This allows us to combine multiple reference scripts without exceeding
    the maximum txn size.

There might be a scenario where we want to consume a UTxO at a script address and the validator of the script requires more info
than the one available in the input, for example it might require the datum of an oracle. In that case we can provide the Oracle's
UTxO as a reference input to access its datum (notice that we are not consuming teh UTxO, we're just referencing it).
This and inline datums are powerful ways to share info ON-CHAIN.

There are 3 ways of attaching the datum:
    1. include datum's hash in txn o/p, 
    2. include datum's hash in txn o/p and actual datum in txn body
    3. include inline datum in txn o/p
If we used the 2nd method, we can use chain indexers to query the blockchain to extract the actual datum (but it's expensive). If you
want to put the datum on-chain, inline datum is the best choice. 
If we use th e3rd method, we just have to indicate that inline datum is used and the script can access it automatically

When submitting a txn, it will have to pass two validation steps before succeeding and being added to the ledger.
    -> The first validation step is checking if the txn was built correctly (if all UTxOs exist, if the beneficiary of the UTxO has
        signed, if the minimum required UTxOs are available, if all hashes are correct, if all data is available). It doesn't check
        whether the scripts validate, so it's inexpensive and no fee/collateral is charged if it fails at this stage. If it passes, 
        that means the node has everything it needs to run the script
    -> In the second step, the node runs all the scripts included in the txn. If all scripts succeed, the node will add the txn to the 
       Ledger and collects the fees. If even one script fails, the whole txn fails and the node will collect the collateral because 
       it's computationally expensive to run scripts. The collateral is explicitly defined by the beneficiary and it must have sufficient
       funds, doesn't include any tokens and can't be in the script address(duh).

******************************************************************************************************************************

This is how we can manually send Ada to some wallet by specifying all the UTxOs to be used in the txn

cardano-cli transaction build  \
    --babbage-era  \
    --testnet-magic 2  \
    --tx-in 23625665a75ea0f6c03fef89669405f4ba43aeef102191ece5aac8c82c5433fd#0  \
    --tx-in 6d49ef070bcc07251fcac4f4edbb8a8c136ea627c786b0c28a883e8f15d5424c#0  \
    --tx-in 90fa04f0198cc06ca5e61f69b73a4c008ba8645be6bfc0617ae24bc530d598a2#0  \
    --tx-out "addr_test1vqvuryhta8a6q0u6qcyk76vvd8skyalggzwflfaykupt97sjauluk 27000000 lovelace"  \
    --change-address addr_test1vrw0jv8jyslxlpsl8ayk28adx2j8g9k8ucv8gtxfqk96hgsu9g832  \
    --out-file tx.body

cardano-cli transaction build  \
    --babbage-era  \
    --testnet-magic 2  \
    --tx-in 23625665a75ea0f6c03fef89669405f4ba43aeef102191ece5aac8c82c5433fd#0  \
    --tx-in 6d49ef070bcc07251fcac4f4edbb8a8c136ea627c786b0c28a883e8f15d5424c#0  \
    --tx-in 90fa04f0198cc06ca5e61f69b73a4c008ba8645be6bfc0617ae24bc530d598a2#0  \
    --tx-out addr_test1vqvuryhta8a6q0u6qcyk76vvd8skyalggzwflfaykupt97sjauluk 27000000 lovelace  \
    --change-address addr_test1vqvuryhta8a6q0u6qcyk76vvd8skyalggzwflfaykupt97sjauluk  \
    --out-file tx.body

cardano-cli transaction sign  \
    --tx-body-file tx.body  \
    --signing-key-file 03.skey  \
    --testnet-magic 2  \
    --out-file tx.signed

cardano-cli transaction submit  \
    --testnet-magic 2  \
    --tx-file tx.signed

-------------------- This is how we send native tokens to another address
---- We use the build raw option to have more control
./cardano-cli transaction build-raw \
    --fee 0 \
    --tx-in fd0790f3984348f65ee22f35480b873b4eb9862065514f3e3a9c0f04d0a6ad63#0 \
        (tx-in input UTxO... because every txn needs an i/p UTxO, duh)
    --tx-out addr_test1vp8s8zu6mr73nvlsjf935k0a38n8xvp3fptkyz2vl8pserqkcx5yz+10000000+"1 328a60495759e0d8e244eca5b85b2467d142c8a755d6cd0592dff47b.6d656c636f696e" \
    --tx-out addr_test1vqvlku0ytscqg32rpv660uu4sgxlje25s5xrpz7zjqsva3c8pfckz+999821915+"999000000 328a60495759e0d8e244eca5b85b2467d142c8a755d6cd0592dff47b.6d656c636f696e" \
        (tx-out receiving_addr+lovelace_amount+"no_tokens actual_token")
        (There is no change address because balancing of native_tokens should be done by hand, hence the build raw)
    --out-file rec_matx.raw
